nothing$0 {X:Type} = Maybe X;
just$1 {X:Type} value:X = Maybe X;

addr_none$00 = MsgAddressExt;
addr_extern$01 len:(## 9) external_address:(bits len)
             = MsgAddressExt;
anycast_info$_ depth:(#<= 30) { depth >= 1 }
   rewrite_pfx:(bits depth) = Anycast;
addr_std$10 anycast:(Maybe Anycast)
   workchain_id:int8 address:bits256  = MsgAddressInt;
addr_var$11 anycast:(Maybe Anycast) addr_len:(## 9)
   workchain_id:int32 address:(bits addr_len) = MsgAddressInt;
_ _:MsgAddressInt = MsgAddress;

var_uint$_ {n:#} len:(#< n) value:(uint (len * 8))
         = VarUInteger n;
nanograms$_ amount:(VarUInteger 16) = Coins;


//
//  This contract schemes:
//

distrib_data$_ started: (## 1)
      distributing_jettons: (## 1)
      volume: Coins
      my_jetton_wallet: distributing_jettons? MsgAddress
      = Distribution;

minter_storage#_ total_supply: Coins
    admin_address: MsgAddress
    consigliere_address: MsgAddress
    distribution_data: (Maybe ^Distribution)
    content: ^Cell
    jetton_wallet_code: ^Cell
    = Storage;


wallet_storage#_ balance:Coins
    owner_address: MsgAddress
    consigliere_address: MsgAddress
    jetton_master_address: MsgAddress
    jetton_wallet_code: ^Cell
    = Storage;
